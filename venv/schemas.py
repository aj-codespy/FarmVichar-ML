# schemas.py
from pydantic import BaseModel, Field
from typing import Optional, List, Dict, Any

class ChatResponse(BaseModel):
    """ Defines the response from the /chat endpoint. """
    response_text: str
    transcribed_text: Optional[str] = None

class PriceRange(BaseModel):
    """ Defines the structure for a crop's price range. """
    crop_name: str
    min_price: int
    max_price: int

class DashboardPredictions(BaseModel):
    """
    Defines the complete, structured output for all predictions on the dashboard,
    generated by a single LLM call.
    """
    recommended_crop: str = Field(..., description="The single best crop recommendation for the next season.")
    yield_prediction_kg_acre: float = Field(..., description="Predicted yield for the primary crop in kg per acre.")
    pest_risk_percent: int = Field(..., description="A percentage risk of pest infestation (0-100).")
    quality_grading_score: int = Field(..., description="An estimated score (out of 100) for the primary crop's quality.")
    price_range_per_quintal: PriceRange = Field(..., description="Estimated market price range for the primary crop.")
    applicable_schemes: List[str] = Field(..., description="A list of 2-3 relevant government schemes.")
    applied_schemes: List[str] = Field(..., description="A list of schemes the farmer has already applied for.")

class DashboardData(BaseModel):
    """ Defines the structure of the data returned for the dashboard. """
    user_profile: Dict[str, Any]
    weather: dict
    predictions: DashboardPredictions

class Alert(BaseModel):
    """ Defines the structure for a single proactive alert. """
    id: str
    severity: str
    title: str
    message: str
    suggestion: str

class AlertsResponse(BaseModel):
    """ Defines the response for the /alerts endpoint. """
    alerts: List[Alert]

class LogEntry(BaseModel):
    """
    Defines a flexible format for a farmer's log entry.
    """
    notes: Optional[str] = None
    log_type: Optional[str] = None
    date: Optional[str] = None
    crop_name: Optional[str] = None
    details: Optional[Dict[str, Any]] = None

class LogAnalysisResponse(BaseModel):
    """
    Defines the structured output from the AI after analyzing a log.
    """
    summary: str
    risk_level: str
    risk_description: str
    structured_log_data: LogEntry
    suggested_action: str

class VoiceLogResponse(BaseModel):
    """
    Defines the response from the voice-to-log endpoint.
    """
    transcribed_text: str
    structured_log: LogEntry

class OnboardingVoiceRequest(BaseModel):
    """
    Defines the data sent with the audio for a single form field.
    """
    field_name: str
    context_question: str

class OnboardingVoiceResponse(BaseModel):
    """
    Defines the response containing the transcribed text and the
    single, extracted value for the form field.
    """
    transcribed_text: str
    extracted_value: Any
    
    # schemas.py
# ... (all your other schemas)

class StructuredLog(BaseModel):
    """Defines the structured output of a parsed farm log entry."""
    log_type: str = Field(..., description="The type of activity, e.g., 'Sowing', 'Irrigation', 'Pest Sighting'.")
    crop_name: str = Field(..., description="The crop the activity is related to.")
    date: str = Field(..., description="The date of the activity in YYYY-MM-DD format.")
    summary: str = Field(..., description="A brief, one-sentence summary of the log.")
    details: Dict[str, Any] = Field({}, description="A dictionary of specific details, like 'product_name' or 'quantity_kg'.")
    
    